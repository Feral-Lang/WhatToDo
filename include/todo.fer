let io = import('std/io');
let fs = import('std/fs');
let ptr = import('std/ptr');
let vec = import('std/vec');

let ItemState = enum(
	.DO,
	.DOING,
	.DONE
);

let ToDoItem = struct(
	state = ItemState.DO,
	data = '',
	subItems = vec.new(refs = true)
);
ToDoItem.setTypeName('ToDoItem');

let ToDo = struct(
	items = vec.new(refs = true)
);
ToDo.setTypeName('ToDo');

let new = fn() {
	return ToDo();
};

###############################################################################
############################ ToDo Helper Functions ############################
###############################################################################

let loadFile in ToDo = fn(filepath) {
	self.items.clear();
	if !fs.exists(filepath) {
		let file = fs.fopen(filepath, 'a+');
		file.seek(0, fs.SEEK_SET);
		return;
	}
	let file = fs.fopen(filepath, 'r');
	file.seek(0, fs.SEEK_SET);
	for line in file.eachLine() {
		if line.empty() { continue; }
		# split format:
		#  idxExpr|stateStr|data
		let lineSplit = line.split('|', 2);
		if lineSplit.len() < 2 {
			raise('ToDo.loadLine(): invalid line: `', line, '`');
		}
		let data = '';
		if lineSplit.len() > 2 { data = lineSplit[2]; }
		self.addItem(data, false, lineSplit[0], lineSplit[1].int());
	}
};

let saveFile in ToDo = fn(filepath) {
	let file = fs.fopen(filepath, 'w+');
	self.writeToFile(file, self.items, '', false);
};

let disp in ToDo = fn() {
	self.writeToFile(io.stdout, self.items, '', true);
};

let writeToFile in ToDo = fn(file, itemList, depthStr, withColor) {
	# used when writing to index based file format (without color)
	# to ensure no empty index gets written.
	let actualIdx = 0;
	for let i = 0; i < itemList.len(); ++i {
		let item = ref(itemList[i]);
		if item.data.empty() && item.subItems.empty() { continue; }
		# if with color, write in human readable format
		# else write in index based, parseable file format.
		if withColor {
			io.fcprintln(file, '[{c}', depthStr, actualIdx + 1, '{0}]: ', getItemStateCol(item.state), item.data, '{0}');
			self.writeToFile(file, item.subItems, depthStr + (actualIdx + 1).str() + '.', withColor);
		} else {
			io.fprintln(file, depthStr, actualIdx, '|', item.state, '|', item.data);
			self.writeToFile(file, item.subItems, depthStr + actualIdx.str() + '.', withColor);
		}
		++actualIdx;
	}
};

let addItem in ToDo = fn(data, byUser = false, idxExpr = nil, state = ItemState.DO) {
	if state < 0 || state >= ItemState.len() {
		raise('invalid state for line: `', line, '`; must be between [0, ', ItemState.len(), ')');
	}
	if idxExpr == nil {
		self.ensureItems(self.items, self.items.len() + 1);
		self.items.back().state = state;
		self.items.back().data = data;
		return true;
	}
	let idxSplit = idxExpr.split('.');
	let idxSplitLen = idxSplit.len();
	let iter = ptr.new(self.items);
	for let i = 0; i < idxSplitLen; ++i {
		let idx = idxSplit[i].int();
		if byUser { --idx; }
		self.ensureItems(iter.get(), idx + 1);
		if i < idxSplitLen - 1 {
			iter.set(iter.get()[idx].subItems);
			continue;
		}
		# we're at the last idx split: set the data on this iter.
		iter.get()[idx].state = state;
		iter.get()[idx].data = data;
		return true;
	}
	return false;
};

let removeItem in ToDo = fn(idxExpr, byUser = false) {
	let idxSplit = idxExpr.split('.');
	let idxSplitLen = idxSplit.len();
	let iter = ptr.new(self.items);
	for let i = 0; i < idxSplitLen; ++i {
		let idx = idxSplit[i].int();
		if byUser { --idx; }
		if idx >= iter.get().len() {
			raise('invalid index provided for item removal');
		}
		if i < idxSplitLen - 1 {
			iter.set(iter.get()[idx].subItems);
			continue;
		}
		# we're at the last idx split: erase it.
		let removalItem = ref(iter.get()[idx]);
		iter.get().erase(idx);
		return removalItem;
	}
	return nil;
};

let moveItem in ToDo = fn(currIdxExpr, newIdxExpr, byUser = false) {
	let item = self.removeItem(currIdxExpr, byUser);
	if item == nil {
		raise('no item found at index: ', currIdxExpr);
	}
	if self.addItem(item.data, byUser, newIdxExpr, item.state) {
		return item;
	}
	return nil;
};

let setItemState in ToDo = fn(idxExpr, newState, byUser = false) {
	let idxSplit = idxExpr.split('.');
	let idxSplitLen = idxSplit.len();
	let iter = ptr.new(self.items);
	for let i = 0; i < idxSplitLen; ++i {
		let idx = idxSplit[i].int();
		if byUser { --idx; }
		if idx >= iter.get().len() {
			raise('invalid index provided for item removal');
		}
		if i < idxSplitLen - 1 {
			iter.set(iter.get()[idx].subItems);
			continue;
		}
		# we're at the last idx split: update the item's state.
		iter.get()[idx].state = newState;
		return ref(iter.get()[idx]);
	}
	return nil;
};

let ensureItems in ToDo = fn(itemList, reqdItemCount) {
	while itemList.len() < reqdItemCount {
		itemList.push(ToDoItem());
	}
};

let getItemStateCol = fn(state) {
	if state == ItemState.DO { return '{w}'; }
	elif state == ItemState.DOING { return '{y}'; }
	elif state == ItemState.DONE { return '{g}'; }
	return '';
};

let getItemStateStr = fn(state) {
	if state == ItemState.DO { return 'do'; }
	elif state == ItemState.DOING { return 'doing'; }
	elif state == ItemState.DONE { return 'done'; }
	return '';
};